df.test  = dfNew[-train,]
#
# # create h2o-ready frame
df.train.hex <- as.h2o(df.train)
df.test.hex <- as.h2o(df.test)
#
colcount = dim(df.train.hex)[2]
df.train.dl <- h2o.deeplearning(x = 2:colcount, y = 1, training_frame = df.train.hex, validation_frame= df.test.hex, hidden=c(10),
distribution= "AUTO", variable_importances = TRUE, reproducible = TRUE, seed = 1234, nfolds=10)
mae.train = h2o.mae(df.train.dl, train = TRUE,  valid = FALSE, xval=FALSE)
mae.test  = h2o.mae(df.train.dl, train = FALSE, valid = TRUE,  xval=FALSE)
mae.xval  = h2o.mae(df.train.dl, train = FALSE, valid = FALSE, xval=TRUE)
# next: create the results table which will be a csv file with response, inputVariableName(s), mae train, test, and vali as other columns
responseCol = response[i]
inputVarCol = as.character(t(paramList))
results.temp = data.frame(responseCol, j, inputVarCol, mae.train, mae.test, mae.xval)  #
results = rbind(results, results.temp)
}
}
# note - had to re-do results since the adding of results to the last results table doesnt work for the 'toString' section.
#results = results[129:382,]
x = results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
# at this point we have a table of values that we can use, but need to select the one var that minimizes the mae.xval
y = y %>% select(responseCol.x, predictorVar, mae.xval) %>% slice(which.min(mae.xval))
# variable 1 selected for predicting NO2 is lag.1.NO2. No surprises there. The mae.xval is 4.544425
# variable 2 selected for predicting NO2 is the lag.1.SOLR.                The mae.xval is 4.360116
# variable 3 selected for predicting NO2 is the lag.2.NO2.                 The mae.xval is 4.259163
chosenVar       = append(chosenVar, y$predictorVar)
mae.xval.latest = append(mae.xval.latest,min(y$mae.xval))
}
chosenVar
mae.xval.latest
#chosenVar       = c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2")
chosenVar = c( "lag.1.NO2",
"lag.1.NO2, lag.1.SOLR",
"lag.1.NO2, lag.1.SOLR, lag.2.NO2",
"lag.1.NO2, lag.1.SOLR, lag.2.NO2, lag.1.NO" )
mae.xval.latest = c(4.544425, 4.360116, 4.259163, 4.120617)
createDataFrame = function(df,responseCol,params){
dfParamsInclude   = which(names(df) %in% c(params))
dfNewParams       = df[,dfParamsInclude]
dfNewResponseInc  = which(names(df) %in% c(responseCol))
dfNewResponse     = df[,dfNewResponseInc]
dfNew             = cbind(dfNewResponse, dfNewParams)
colnames(dfNew)[1] = paste0(responseCol)
return(dfNew)
}
response        = c('NO2')
results         = c()
# get data set fields that I can use in the model.
dropIdx               = which(names(df) %in% c(response, chosenVar[length(chosenVar)])) #chosenVar))
dfPredictors          = df[,-dropIdx]
predictorVariableList = names(dfPredictors)
predictorVariableList
chosenVar[length(chosenVar)]
chosenVar = c( c("lag.1.NO2"),
c("lag.1.NO2", "lag.1.SOLR"),
c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2"),
c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2", "lag.1.NO") )
mae.xval.latest = c(4.544425, 4.360116, 4.259163, 4.120617)
createDataFrame = function(df,responseCol,params){
dfParamsInclude   = which(names(df) %in% c(params))
dfNewParams       = df[,dfParamsInclude]
dfNewResponseInc  = which(names(df) %in% c(responseCol))
dfNewResponse     = df[,dfNewResponseInc]
dfNew             = cbind(dfNewResponse, dfNewParams)
colnames(dfNew)[1] = paste0(responseCol)
return(dfNew)
}
chosenVar(length(chosenVar))
chosenVar[length(chosenVar)]
chosenVar = c( c("lag.1.NO2"),
c("lag.1.NO2", "lag.1.SOLR"),
c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2"),
c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2", "lag.1.NO") )
chosenVar[length(chosenVar)]
chosenVar
#library(h2o)
#localH2O = h2o.init(nthreads=-1)
#chosenVar       = c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2")
chosenVar = c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2", "lag.1.NO")
mae.xval.latest = c(4.544425, 4.360116, 4.259163, 4.120617)
chosenVar[length(chosenVar)]
createDataFrame = function(df,responseCol,params){
dfParamsInclude   = which(names(df) %in% c(params))
dfNewParams       = df[,dfParamsInclude]
dfNewResponseInc  = which(names(df) %in% c(responseCol))
dfNewResponse     = df[,dfNewResponseInc]
dfNew             = cbind(dfNewResponse, dfNewParams)
colnames(dfNew)[1] = paste0(responseCol)
return(dfNew)
}
for (i in 1:1){
response        = c('NO2')
results         = c()
# get data set fields that I can use in the model.
dropIdx               = which(names(df) %in% c(response, chosenVar)) #chosenVar[length(chosenVar)])) #chosenVar))
dfPredictors          = df[,-dropIdx]
predictorVariableList = names(dfPredictors)
#length(predictorVariableList)
# get all values in data frame that are remaining...
combn = data.frame(combn(predictorVariableList, 1))
set.seed(123)
smp.size = floor(0.70 * nrow(df))
train = sample(seq_len(nrow(df)), size = smp.size)
test = -train
if(mae.xval.latest[length(mae.xval.latest)] > mae.xval.latest[length(mae.xval.latest)-1]) {
break
}
for (i in 1:1){
for (j in 1:dim(combn)[2]){
# create the data frame
#paramList = as.list(t(combn[j]))    # for this next loop we need to add chosenVar's + 1 from each combn
#listVars  = chosenVar[length(chosenVar)]
paramList = append(chosenVar, as.list(t(combn[j])))
dfNew = createDataFrame(df, response[i], paramList)
# # rename the df to df.train, df.test, and df.vali respectively
df.train = dfNew[train,]
df.test  = dfNew[-train,]
#
# # create h2o-ready frame
df.train.hex <- as.h2o(df.train)
df.test.hex <- as.h2o(df.test)
#
colcount = dim(df.train.hex)[2]
df.train.dl <- h2o.deeplearning(x = 2:colcount, y = 1, training_frame = df.train.hex, validation_frame= df.test.hex, hidden=c(10),
distribution= "AUTO", variable_importances = TRUE, reproducible = TRUE, seed = 1234, nfolds=10)
mae.train = h2o.mae(df.train.dl, train = TRUE,  valid = FALSE, xval=FALSE)
mae.test  = h2o.mae(df.train.dl, train = FALSE, valid = TRUE,  xval=FALSE)
mae.xval  = h2o.mae(df.train.dl, train = FALSE, valid = FALSE, xval=TRUE)
# next: create the results table which will be a csv file with response, inputVariableName(s), mae train, test, and vali as other columns
responseCol = response[i]
inputVarCol = as.character(t(paramList))
results.temp = data.frame(responseCol, j, inputVarCol, mae.train, mae.test, mae.xval)  #
results = rbind(results, results.temp)
}
}
# note - had to re-do results since the adding of results to the last results table doesnt work for the 'toString' section.
#results = results[129:382,]
x = results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
# at this point we have a table of values that we can use, but need to select the one var that minimizes the mae.xval
y = y %>% select(responseCol.x, predictorVar, mae.xval) %>% slice(which.min(mae.xval))
# variable 1 selected for predicting NO2 is lag.1.NO2. No surprises there. The mae.xval is 4.544425
# variable 2 selected for predicting NO2 is the lag.1.SOLR.                The mae.xval is 4.360116
# variable 3 selected for predicting NO2 is the lag.2.NO2.                 The mae.xval is 4.259163
chosenVar       = append(chosenVar, y$predictorVar)
mae.xval.latest = append(mae.xval.latest,min(y$mae.xval))
}
chosenVar
mae.xval.latest
x = results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
y
y = inner_join(x, results, by=("j" = "j"))
y
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y
y = y %>% select(responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y
y = y[,-1]  # remove the 'j'!!
y
y = y %>% select(responseCol.x, predictorVar, mae.xval) %>% slice(which.min(mae.xval))
y
chosenVar
mae.xval.latest
chosenVar
y$predictorVar
y$predictorVar
y$predictorVar[length(y$predictorVar)]
length(y$predictorVar)
y$predictorVar
as.vector(y$predictorVar)
length(y$predictorVar)
temp = as.vector(y$predictorVar)
temp
length(temp)
dim(temp)
as.list(temp)
length(temp)
temp = as.list(temp)
length(temp)
dim(temp)
y$predictorVar
y
y = inner_join(x, results, by=("j" = "j"))
y
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y
y = y[,-1]  # remove the 'j'!!
y
y = y %>% select(responseCol.x, predictorVar, mae.xval) %>% slice(which.min(mae.xval))
y
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
y
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y
y$predictorVar
y$predictorVar
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
# at this point we have a table of values that we can use, but need to select the one var that minimizes the mae.xval
y = y %>% select(responseCol.x, predictorVar, mae.xval) %>% slice(which.min(mae.xval))
$predictorVar
y$predictorVar
split(y$predictorVar)
pop(y$predictorVar)
class(y$predictorVar)
strsplit(y$predictorVar)
strsplit(y$predictorVar, split=",")
length(strsplit(y$predictorVar, split=","))
unlist(strsplit(y$predictorVar, split))
strsplit(y$predictorVar, split=", ")
temp = strsplit(y$predictorVar, split=", ")
length(temp)
class(temp)
unlist(temp)
temp = unlist(temp)
length(temp)
addPredictorVar = unlist(strsplit(y$predictorVar, split=", ")))
addPredictorVar = unlist(strsplit(y$predictorVar, split=", "))
addPredictorVar
chosenVar       = append(chosenVar, addPredictorVar[length(addPredictorVar)]) #y$predictorVar)
chosenVar
chosenVar = chosenVar[1:5]
chosenVar
chosenVar = chosenVar[1:4]
ddPredictorVar = unlist(strsplit(y$predictorVar, split=", "))
addPredictorVar = unlist(strsplit(y$predictorVar, split=", "))
addPredictorVar
chosenVar       = append(chosenVar, addPredictorVar[length(addPredictorVar)])
chosenVar
#library(h2o)
#localH2O = h2o.init(nthreads=-1)
#chosenVar       = c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2")
chosenVar = c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2", "lag.1.NO", "TimeHoursNum")
mae.xval.latest = c(4.544425, 4.360116, 4.259163, 4.120617, 4.042997)
createDataFrame = function(df,responseCol,params){
dfParamsInclude   = which(names(df) %in% c(params))
dfNewParams       = df[,dfParamsInclude]
dfNewResponseInc  = which(names(df) %in% c(responseCol))
dfNewResponse     = df[,dfNewResponseInc]
dfNew             = cbind(dfNewResponse, dfNewParams)
colnames(dfNew)[1] = paste0(responseCol)
return(dfNew)
}
for (i in 1:1){
response        = c('NO2')
results         = c()
# get data set fields that I can use in the model.
dropIdx               = which(names(df) %in% c(response, chosenVar)) #chosenVar[length(chosenVar)])) #chosenVar))
dfPredictors          = df[,-dropIdx]
predictorVariableList = names(dfPredictors)
#length(predictorVariableList)
# get all values in data frame that are remaining...
combn = data.frame(combn(predictorVariableList, 1))
set.seed(123)
smp.size = floor(0.70 * nrow(df))
train = sample(seq_len(nrow(df)), size = smp.size)
test = -train
if(mae.xval.latest[length(mae.xval.latest)] > mae.xval.latest[length(mae.xval.latest)-1]) {
break
}
for (i in 1:1){
for (j in 1:dim(combn)[2]){
# create the data frame
#paramList = as.list(t(combn[j]))    # for this next loop we need to add chosenVar's + 1 from each combn
#listVars  = chosenVar[length(chosenVar)]
paramList = append(chosenVar, as.list(t(combn[j])))
dfNew = createDataFrame(df, response[i], paramList)
# # rename the df to df.train, df.test, and df.vali respectively
df.train = dfNew[train,]
df.test  = dfNew[-train,]
#
# # create h2o-ready frame
df.train.hex <- as.h2o(df.train)
df.test.hex <- as.h2o(df.test)
#
colcount = dim(df.train.hex)[2]
df.train.dl <- h2o.deeplearning(x = 2:colcount, y = 1, training_frame = df.train.hex, validation_frame= df.test.hex, hidden=c(10),
distribution= "AUTO", variable_importances = TRUE, reproducible = TRUE, seed = 1234, nfolds=10)
mae.train = h2o.mae(df.train.dl, train = TRUE,  valid = FALSE, xval=FALSE)
mae.test  = h2o.mae(df.train.dl, train = FALSE, valid = TRUE,  xval=FALSE)
mae.xval  = h2o.mae(df.train.dl, train = FALSE, valid = FALSE, xval=TRUE)
# next: create the results table which will be a csv file with response, inputVariableName(s), mae train, test, and vali as other columns
responseCol = response[i]
inputVarCol = as.character(t(paramList))
results.temp = data.frame(responseCol, j, inputVarCol, mae.train, mae.test, mae.xval)  #
results = rbind(results, results.temp)
}
}
# note - had to re-do results since the adding of results to the last results table doesnt work for the 'toString' section.
#results = results[129:382,]
x = results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
# at this point we have a table of values that we can use, but need to select the one var that minimizes the mae.xval
y = y %>% select(responseCol.x, predictorVar, mae.xval) %>% slice(which.min(mae.xval))
# variable 1 selected for predicting NO2 is lag.1.NO2. No surprises there. The mae.xval is 4.544425
# variable 2 selected for predicting NO2 is the lag.1.SOLR.                The mae.xval is 4.360116
# variable 3 selected for predicting NO2 is the lag.2.NO2.                 The mae.xval is 4.259163
addPredictorVar = unlist(strsplit(y$predictorVar, split=", "))
chosenVar       = append(chosenVar, addPredictorVar[length(addPredictorVar)]) #y$predictorVar)
mae.xval.latest = append(mae.xval.latest,min(y$mae.xval))
}
chosenVar
mae.xval.latest
chosenVar
mae.xval.latest
#library(h2o)
#localH2O = h2o.init(nthreads=-1)
#chosenVar       = c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2")
#chosenVar = c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2", "lag.1.NO", "TimeHoursNum")
#mae.xval.latest = c(4.544425, 4.360116, 4.259163, 4.120617, 4.042997)
createDataFrame = function(df,responseCol,params){
dfParamsInclude   = which(names(df) %in% c(params))
dfNewParams       = df[,dfParamsInclude]
dfNewResponseInc  = which(names(df) %in% c(responseCol))
dfNewResponse     = df[,dfNewResponseInc]
dfNew             = cbind(dfNewResponse, dfNewParams)
colnames(dfNew)[1] = paste0(responseCol)
return(dfNew)
}
for (i in 1:2){
response        = c('NO2')
results         = c()
# get data set fields that I can use in the model.
dropIdx               = which(names(df) %in% c(response, chosenVar)) #chosenVar[length(chosenVar)])) #chosenVar))
dfPredictors          = df[,-dropIdx]
predictorVariableList = names(dfPredictors)
#length(predictorVariableList)
# get all values in data frame that are remaining...
combn = data.frame(combn(predictorVariableList, 1))
set.seed(123)
smp.size = floor(0.70 * nrow(df))
train = sample(seq_len(nrow(df)), size = smp.size)
test = -train
if(mae.xval.latest[length(mae.xval.latest)] > mae.xval.latest[length(mae.xval.latest)-1]) {
break
}
for (i in 1:1){
for (j in 1:dim(combn)[2]){
# create the data frame
#paramList = as.list(t(combn[j]))    # for this next loop we need to add chosenVar's + 1 from each combn
#listVars  = chosenVar[length(chosenVar)]
paramList = append(chosenVar, as.list(t(combn[j])))
dfNew = createDataFrame(df, response[i], paramList)
# # rename the df to df.train, df.test, and df.vali respectively
df.train = dfNew[train,]
df.test  = dfNew[-train,]
#
# # create h2o-ready frame
df.train.hex <- as.h2o(df.train)
df.test.hex <- as.h2o(df.test)
#
colcount = dim(df.train.hex)[2]
df.train.dl <- h2o.deeplearning(x = 2:colcount, y = 1, training_frame = df.train.hex, validation_frame= df.test.hex, hidden=c(10),
distribution= "AUTO", variable_importances = TRUE, reproducible = TRUE, seed = 1234, nfolds=10)
mae.train = h2o.mae(df.train.dl, train = TRUE,  valid = FALSE, xval=FALSE)
mae.test  = h2o.mae(df.train.dl, train = FALSE, valid = TRUE,  xval=FALSE)
mae.xval  = h2o.mae(df.train.dl, train = FALSE, valid = FALSE, xval=TRUE)
# next: create the results table which will be a csv file with response, inputVariableName(s), mae train, test, and vali as other columns
responseCol = response[i]
inputVarCol = as.character(t(paramList))
results.temp = data.frame(responseCol, j, inputVarCol, mae.train, mae.test, mae.xval)  #
results = rbind(results, results.temp)
}
}
# note - had to re-do results since the adding of results to the last results table doesnt work for the 'toString' section.
#results = results[129:382,]
x = results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
# at this point we have a table of values that we can use, but need to select the one var that minimizes the mae.xval
y = y %>% select(responseCol.x, predictorVar, mae.xval) %>% slice(which.min(mae.xval))
# variable 1 selected for predicting NO2 is lag.1.NO2. No surprises there. The mae.xval is 4.544425
# variable 2 selected for predicting NO2 is the lag.1.SOLR.                The mae.xval is 4.360116
# variable 3 selected for predicting NO2 is the lag.2.NO2.                 The mae.xval is 4.259163
addPredictorVar = unlist(strsplit(y$predictorVar, split=", "))
chosenVar       = append(chosenVar, addPredictorVar[length(addPredictorVar)]) #y$predictorVar)
mae.xval.latest = append(mae.xval.latest,min(y$mae.xval))
}
chosenVar
mae.xval.latest
#library(h2o)
#localH2O = h2o.init(nthreads=-1)
#chosenVar       = c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2")
#chosenVar = c("lag.1.NO2", "lag.1.SOLR", "lag.2.NO2", "lag.1.NO", "TimeHoursNum")
#mae.xval.latest = c(4.544425, 4.360116, 4.259163, 4.120617, 4.042997)
createDataFrame = function(df,responseCol,params){
dfParamsInclude   = which(names(df) %in% c(params))
dfNewParams       = df[,dfParamsInclude]
dfNewResponseInc  = which(names(df) %in% c(responseCol))
dfNewResponse     = df[,dfNewResponseInc]
dfNew             = cbind(dfNewResponse, dfNewParams)
colnames(dfNew)[1] = paste0(responseCol)
return(dfNew)
}
for (i in 1:1){
response        = c('NO2')
results         = c()
# get data set fields that I can use in the model.
dropIdx               = which(names(df) %in% c(response, chosenVar)) #chosenVar[length(chosenVar)])) #chosenVar))
dfPredictors          = df[,-dropIdx]
predictorVariableList = names(dfPredictors)
#length(predictorVariableList)
# get all values in data frame that are remaining...
combn = data.frame(combn(predictorVariableList, 1))
set.seed(123)
smp.size = floor(0.70 * nrow(df))
train = sample(seq_len(nrow(df)), size = smp.size)
test = -train
if(mae.xval.latest[length(mae.xval.latest)] > mae.xval.latest[length(mae.xval.latest)-1]) {
break
}
for (i in 1:1){
for (j in 1:dim(combn)[2]){
# create the data frame
#paramList = as.list(t(combn[j]))    # for this next loop we need to add chosenVar's + 1 from each combn
#listVars  = chosenVar[length(chosenVar)]
paramList = append(chosenVar, as.list(t(combn[j])))
dfNew = createDataFrame(df, response[i], paramList)
# # rename the df to df.train, df.test, and df.vali respectively
df.train = dfNew[train,]
df.test  = dfNew[-train,]
#
# # create h2o-ready frame
df.train.hex <- as.h2o(df.train)
df.test.hex <- as.h2o(df.test)
#
colcount = dim(df.train.hex)[2]
df.train.dl <- h2o.deeplearning(x = 2:colcount, y = 1, training_frame = df.train.hex, validation_frame= df.test.hex, hidden=c(10),
distribution= "AUTO", variable_importances = TRUE, reproducible = TRUE, seed = 1234, nfolds=10)
mae.train = h2o.mae(df.train.dl, train = TRUE,  valid = FALSE, xval=FALSE)
mae.test  = h2o.mae(df.train.dl, train = FALSE, valid = TRUE,  xval=FALSE)
mae.xval  = h2o.mae(df.train.dl, train = FALSE, valid = FALSE, xval=TRUE)
# next: create the results table which will be a csv file with response, inputVariableName(s), mae train, test, and vali as other columns
responseCol = response[i]
inputVarCol = as.character(t(paramList))
results.temp = data.frame(responseCol, j, inputVarCol, mae.train, mae.test, mae.xval)  #
results = rbind(results, results.temp)
}
}
# note - had to re-do results since the adding of results to the last results table doesnt work for the 'toString' section.
#results = results[129:382,]
x = results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
# at this point we have a table of values that we can use, but need to select the one var that minimizes the mae.xval
y = y %>% select(responseCol.x, predictorVar, mae.xval) %>% slice(which.min(mae.xval))
# variable 1 selected for predicting NO2 is lag.1.NO2. No surprises there. The mae.xval is 4.544425
# variable 2 selected for predicting NO2 is the lag.1.SOLR.                The mae.xval is 4.360116
# variable 3 selected for predicting NO2 is the lag.2.NO2.                 The mae.xval is 4.259163
addPredictorVar = unlist(strsplit(y$predictorVar, split=", "))
chosenVar       = append(chosenVar, addPredictorVar[length(addPredictorVar)]) #y$predictorVar)
mae.xval.latest = append(mae.xval.latest,min(y$mae.xval))
}
chosenVar
mae.xval.latest
