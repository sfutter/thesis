dfExportResults = data.frame(chosenVar, mae.train.latest, mae.test.latest, mae.xval.latest, 1)
dfExportResults
dfExportResults
dfExportResults %>%
group_by(X1) %>%
summarise(chosenVar = toString(chosenVar)) %>%
ungroup()
dfExportResults2 = dfExportResults %>%
group_by(X1) %>%
summarise(chosenVar = toString(chosenVar)) %>%
ungroup()
dfExportResults
inner_join(dfExportResults, dfExportResults2, by=("X1" = "X1"))
dfExportResults2
dfExportResults2 = inner_join(dfExportResults, dfExportResults2, by=("X1" = "X1"))
dfExportResults2 %>% group_by(X1) %>% filter(row_number(mae.train) == 1)
dfExportResults2 %>% select(chosenVar.y, mae.train.latest, mae.test.latest, mae.xval.latest) %>% slice(which.min(mae.xval.latest))
dfExport = dfExportResults2 %>% select(chosenVar.y, mae.train.latest, mae.test.latest, mae.xval.latest) %>% slice(which.min(mae.xval.latest))
write.csv(dfExport, file.path(outfilePath,'dfExportResultsNO2.csv'))
createDataFrame = function(df,responseCol,params){
dfParamsInclude   = which(names(df) %in% c(params))
dfNewParams       = df[,dfParamsInclude]
dfNewResponseInc  = which(names(df) %in% c(responseCol))
dfNewResponse     = df[,dfNewResponseInc]
dfNew             = cbind(dfNewResponse, dfNewParams)
colnames(dfNew)[1] = paste0(responseCol)
return(dfNew)
}
chosenVar        = c()
mae.train.latest = c()
mae.test.latest  = c()
mae.xval.latest  = c()
for (i in 1:6){
response        = c('NO2')
results         = c()
# get data set fields that I can use in the model.
dropIdx               = which(names(df) %in% c('Year', 'MMYYYY', response, chosenVar)) #chosenVar[length(chosenVar)])) #chosenVar))
dfPredictors          = df[,-dropIdx]
predictorVariableList = names(dfPredictors)
#length(predictorVariableList)
# get all values in data frame that are remaining and find all combinations of each --> i changed this to be '1' var added each time so combination no longer needed, but i keep for future ref and change the combination to '1' var.
combn = data.frame(combn(predictorVariableList, 1))
set.seed(123)
smp.size = floor(0.70 * nrow(df))
train = sample(seq_len(nrow(df)), size = smp.size)
test = -train
if(length(mae.xval.latest)>1){
if(mae.xval.latest[length(mae.xval.latest)] > mae.xval.latest[length(mae.xval.latest)-1]) {
break
}
}
for (i in 1:1){
for (j in 1:dim(combn)[2]){
# create the data frame
#paramList = as.list(t(combn[j]))    # for this next loop we need to add chosenVar's + 1 from each combn
#listVars  = chosenVar[length(chosenVar)]
paramList = append(chosenVar, as.list(t(combn[j])))
dfNew = createDataFrame(df, response[i], paramList)
# # rename the df to df.train, df.test, and df.vali respectively
df.train = dfNew[train,]
df.test  = dfNew[-train,]
#
# # create h2o-ready frame
df.train.hex <- as.h2o(df.train)
df.test.hex <- as.h2o(df.test)
#
colcount = dim(df.train.hex)[2]
# nodes_layer1 = ceiling(colcount/2)   # 1
nodes_layer1 = 10
df.train.dl <- h2o.deeplearning(x = 2:colcount, y = 1, training_frame = df.train.hex, validation_frame= df.test.hex, hidden=c(nodes_layer1),
distribution= "AUTO", variable_importances = TRUE, reproducible = TRUE, seed = 1234, nfolds=10)
mae.train = h2o.mae(df.train.dl, train = TRUE,  valid = FALSE, xval=FALSE)
mae.test  = h2o.mae(df.train.dl, train = FALSE, valid = TRUE,  xval=FALSE)
mae.xval  = h2o.mae(df.train.dl, train = FALSE, valid = FALSE, xval=TRUE)
# next: create the results table which will be a csv file with response, inputVariableName(s), mae train, test, and vali as other columns
responseCol = response[i]
inputVarCol = as.character(t(paramList))
results.temp = data.frame(responseCol, j, inputVarCol, mae.train, mae.test, mae.xval)  #
results = rbind(results, results.temp)
}
}
# note - had to re-do results since the adding of results to the last results table doesnt work for the 'toString' section.
#results = results[129:382,]
x = results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
# at this point we have a table of values that we can use, but need to select the one var that minimizes the mae.xval
y = y %>% select(responseCol.x, predictorVar, mae.train, mae.test, mae.xval) %>% slice(which.min(mae.xval))
# variable 1 selected for predicting NO2 is lag.1.NO2. No surprises there. The mae.xval is 4.544425
# variable 2 selected for predicting NO2 is the lag.1.SOLR.                The mae.xval is 4.360116
# variable 3 selected for predicting NO2 is the lag.2.NO2.                 The mae.xval is 4.259163
addPredictorVar = unlist(strsplit(y$predictorVar, split=", "))
chosenVar       = append(chosenVar, addPredictorVar[length(addPredictorVar)]) #y$predictorVar)
mae.train.latest = append(mae.train.latest,min(y$mae.train))
mae.test.latest = append(mae.test.latest,min(y$mae.test))
mae.xval.latest = append(mae.xval.latest,min(y$mae.xval))
}
chosenVar
mae.train.latest
mae.test.latest
mae.xval.latest
# EXPORT RESULTS TO CSV
# NO2 - cross validation with half as many nodes rounded up is:
# [1] "lag.1.NO2" "MMYYYY"    "lag.2.NO2" "RHUM"
# [1] 4.702829 4.410815 3.993891 4.054605
# [1] 5.128614 4.640433 4.268468 4.326089
# [1] 4.802746 4.505613 4.128416 4.245010
# [1] "lag.1.NO2" "lag.2.NO2"
# [1] 4.702829 4.821469
# [1] 5.128614 5.210384
# [1] 4.802746 4.977030
# Export the data prediction for the testing and validation data sets
# Get Export ready to be sent to csv file
outfilePath = file.path("~/Dropbox","NU","THESIS_MAC","thesis","DATASETS","RESULTS", "PREDICTIONS","FORWARD_VAR_PREDICTIONS")
dfExportResults = data.frame(chosenVar, mae.train.latest, mae.test.latest, mae.xval.latest, 1)
dfExportResults2 = dfExportResults %>%
group_by(X1) %>%
summarise(chosenVar = toString(chosenVar)) %>%
ungroup()
dfExportResults2 = inner_join(dfExportResults, dfExportResults2, by=("X1" = "X1"))
dfExportResults2 = dfExportResults2 %>% group_by(X1) %>% filter(row_number(mae.train) == 1)
dfExportResults2 = dfExportResults2 %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
chosenVar
mae.train.latest
mae.test.latest
mae.xval.latest
results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
y
chosenVar
chosenVar
mae.xval.latest
chosenVar
mae.xval.latest
dfExport
dfExportResults2
dfExportResults2 %>% select(chosenVar.y, mae.train.latest, mae.test.latest, mae.xval.latest) %>% slice(which.min(mae.xval.latest))
chosenVar
mae.xval.latest
dfExportResults2 %>% select(chosenVar.y, mae.train.latest, mae.test.latest, mae.xval.latest) %>% slice(which.min(mae.xval.latest))
dfNew
dfPrior
read.csv(file.path(inPath,"dfExportResultsNO2.csv"),na.strings=c("NA"," "))
dfPrior  = read.csv(file.path(outfilePath,"dfExportResultsNO2.csv"),na.strings=c("NA"," "))
chosenVar
mae.train.latest
mae.test.latest
mae.xval.latest
chosenVar[1:length(chosenVar)]
chosenVar[1:length(chosenVar)-1]
chosenVar.final        = chosenVar[1:length(chosenVar)-1]
mae.train.latest.final = mae.train.latest.final[1:(length(mae.train.latest.final)-1]
chosenVar.final        = chosenVar[1:length(chosenVar)-1]
mae.train.latest.final = mae.train.latest.final[1:length(mae.train.latest.final)-1]
chosenVar.final        = chosenVar[1:length(chosenVar)-1]
mae.train.latest.final = mae.train.latest[1:length(mae.train.latest)-1]
mae.test.latest.final  = mae.test.latest.[1:length(mae.test.latest)-1]
mae.test.latest
chosenVar.final        = chosenVar[1:length(chosenVar)-1]
mae.train.latest.final = mae.train.latest[1:length(mae.train.latest)-1]
mae.test.latest.final  = mae.test.latest[1:length(mae.test.latest)-1]
mae.xval.latest.final  = mae.xval.latest[1:length(mae.xval.latest)-1]
outfilePath = file.path("~/Dropbox","NU","THESIS_MAC","thesis","DATASETS","RESULTS", "PREDICTIONS","FORWARD_VAR_PREDICTIONS")
dfExportResults = data.frame(chosenVar, mae.train.latest, mae.test.latest, mae.xval.latest, 1)
dfExportsResults
data.frame(chosenVar, mae.train.latest, mae.test.latest, mae.xval.latest, 1)
dfExportResults = data.frame(chosenVar.final, mae.train.latest.final, mae.test.latest.final, mae.xval.latest.final, 1)
dfExportsResults
createDataFrame = function(df,responseCol,params){
dfParamsInclude   = which(names(df) %in% c(params))
dfNewParams       = df[,dfParamsInclude]
dfNewResponseInc  = which(names(df) %in% c(responseCol))
dfNewResponse     = df[,dfNewResponseInc]
dfNew             = cbind(dfNewResponse, dfNewParams)
colnames(dfNew)[1] = paste0(responseCol)
return(dfNew)
}
chosenVar        = c()
mae.train.latest = c()
mae.test.latest  = c()
mae.xval.latest  = c()
for (i in 1:6){
response        = c('NO2')    # NO, NOX, SO2, PM10, PM2.5
results         = c()
# get data set fields that I can use in the model.
dropIdx               = which(names(df) %in% c('Year', 'MMYYYY', response, chosenVar)) #chosenVar[length(chosenVar)])) #chosenVar))
dfPredictors          = df[,-dropIdx]
predictorVariableList = names(dfPredictors)
#length(predictorVariableList)
# get all values in data frame that are remaining and find all combinations of each --> i changed this to be '1' var added each time so combination no longer needed, but i keep for future ref and change the combination to '1' var.
combn = data.frame(combn(predictorVariableList, 1))
set.seed(123)
smp.size = floor(0.70 * nrow(df))
train = sample(seq_len(nrow(df)), size = smp.size)
test = -train
if(length(mae.xval.latest)>1){
if(mae.xval.latest[length(mae.xval.latest)] > mae.xval.latest[length(mae.xval.latest)-1]) {
break
}
}
for (i in 1:1){
for (j in 1:dim(combn)[2]){
# create the data frame
#paramList = as.list(t(combn[j]))    # for this next loop we need to add chosenVar's + 1 from each combn
#listVars  = chosenVar[length(chosenVar)]
paramList = append(chosenVar, as.list(t(combn[j])))
dfNew = createDataFrame(df, response[i], paramList)
# # rename the df to df.train, df.test, and df.vali respectively
df.train = dfNew[train,]
df.test  = dfNew[-train,]
#
# # create h2o-ready frame
df.train.hex <- as.h2o(df.train)
df.test.hex <- as.h2o(df.test)
#
colcount = dim(df.train.hex)[2]
# nodes_layer1 = ceiling(colcount/2)   # 1
nodes_layer1 = 10
df.train.dl <- h2o.deeplearning(x = 2:colcount, y = 1, training_frame = df.train.hex, validation_frame= df.test.hex, hidden=c(nodes_layer1),
distribution= "AUTO", variable_importances = TRUE, reproducible = TRUE, seed = 1234, nfolds=10)
mae.train = h2o.mae(df.train.dl, train = TRUE,  valid = FALSE, xval=FALSE)
mae.test  = h2o.mae(df.train.dl, train = FALSE, valid = TRUE,  xval=FALSE)
mae.xval  = h2o.mae(df.train.dl, train = FALSE, valid = FALSE, xval=TRUE)
# next: create the results table which will be a csv file with response, inputVariableName(s), mae train, test, and vali as other columns
responseCol = response[i]
inputVarCol = as.character(t(paramList))
results.temp = data.frame(responseCol, j, inputVarCol, mae.train, mae.test, mae.xval)  #
results = rbind(results, results.temp)
}
}
# note - had to re-do results since the adding of results to the last results table doesnt work for the 'toString' section.
#results = results[129:382,]
x = results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
# at this point we have a table of values that we can use, but need to select the one var that minimizes the mae.xval
y = y %>% select(responseCol.x, predictorVar, mae.train, mae.test, mae.xval) %>% slice(which.min(mae.xval))
# variable 1 selected for predicting NO2 is lag.1.NO2. No surprises there. The mae.xval is 4.544425
# variable 2 selected for predicting NO2 is the lag.1.SOLR.                The mae.xval is 4.360116
# variable 3 selected for predicting NO2 is the lag.2.NO2.                 The mae.xval is 4.259163
addPredictorVar = unlist(strsplit(y$predictorVar, split=", "))
chosenVar       = append(chosenVar, addPredictorVar[length(addPredictorVar)]) #y$predictorVar)
mae.train.latest = append(mae.train.latest,min(y$mae.train))
mae.test.latest = append(mae.test.latest,min(y$mae.test))
mae.xval.latest = append(mae.xval.latest,min(y$mae.xval))
}
dfExportResults
dfExportResults %>%
group_by(X1) %>%
summarise(chosenVar.final = toString(chosenVar.final)) %>%
ungroup()
dfExportResults2 = dfExportResults %>%
group_by(X1) %>%
summarise(chosenVar.final = toString(chosenVar.final)) %>%
ungroup()
inner_join(dfExportResults, dfExportResults2, by=("X1" = "X1"))
dfExportResults2 = inner_join(dfExportResults, dfExportResults2, by=("X1" = "X1"))
dfExportResults2 %>% group_by(X1) %>% filter(row_number(mae.train) == 1)
dfExportResults2 = dfExportResults2 %>% group_by(X1) %>% filter(row_number(mae.train) == 1)
dfExportResults2
dfExport = dfExportResults2 %>% select(chosenVar.final.x, mae.train.latest.final, mae.test.latest.final, mae.xval.latest.final) %>%
dfExport
dfExportResults2 %>% select(chosenVar.final.x, mae.train.latest.final, mae.test.latest.final, mae.xval.latest.final) %>% slice(which.min(mae.xval.latest.final))
dfExportResults2
dfExportResults %>%
group_by(X1) %>%
summarise(chosenVar.final = toString(chosenVar.final)) %>%
ungroup()
dfExportResults
dfExportResults %>%
group_by(X1) %>%
summarise(chosenVar.final = toString(chosenVar.final)) %>%
ungroup()
# get min mae.xval predictor inputs
dfExportResults2 = dfExportResults %>%
group_by(X1) %>%
summarise(chosenVar.final = toString(chosenVar.final)) %>%
ungroup()
dfExportResults2 = inner_join(dfExportResults, dfExportResults2, by=("X1" = "X1"))
dfExportResults2
dfExportResults2 %>% group_by(X1) %>% filter(row_number(mae.train) == 1)
#dfExportResults2 = dfExportResults2 %>% select(j, responseCol.x, predictorVar, mae.train, ma
dfExportResults2 %>% select(chosenVar.final.x, mae.train.latest.final, mae.test.latest.final, mae.xval.latest.final) %>% slice(which.min(mae.xval.latest.final))
dfExportResults2
dfExportResults2 %>% select(chosenVar.final.y, mae.train.latest.final, mae.test.latest.final, mae.xval.latest.final) %>% slice(which.min(mae.xval.latest.final))
dfExport = dfExportResults2 %>% select(chosenVar.final.y, mae.train.latest.final, mae.test.latest.final, mae.xval.latest.final) %>% slice(which.min(mae.xval.latest.final))
dfPrior
dfPrior  = read.csv(file.path(outfilePath,"dfExportResultsNO2.csv"),na.strings=c("NA"," "))
dfPrior  = read.csv(file.path(outfilePath,"dfExportResultsNO2.csv"),na.strings=c("NA"," "))
outfilePath
read.csv(file.path(outfilePath,"dfExportResultsNO2.csv"),na.strings=c("NA"," "))
dfPrior  = read.csv(file.path(outfilePath,"dfExportResultsNO2.csv"),na.strings=c("NA"," "))
read.csv(file.path(outfilePath,"dfExportResultsNO2.csv"),na.strings=c("NA"," "))
dfPrior
dfNew    = rbind(dfPrior, dfExport)
dfNew
dfPrior
dfExport
dfPrior  = read.csv(file.path(outfilePath,"dfExportResultsNO2.csv"),na.strings=c("NA"," "))
dfPrior
dfNew    = rbind(dfPrior, dfExport)
dfNew = dfExport
dfExport
write.csv(dfNew, file.path(outfilePath,'dfExportResultsNO2_del.csv'))
dfNew    = rbind(dfPrior, dfExport)
dfPrior  = read.csv(file.path(outfilePath,"dfExportResultsNO2.csv"),na.strings=c("NA"," "))
dfNew    = rbind(dfPrior, dfExport)
write.csv(dfNew, file.path(outfilePath,'dfExportResultsNO2_del.csv'))
dfPrior
dfExport
dfPrior
chosenVar
mae.train.latest
mae.test.latest
mae.xval.latest
# remove the last value as that has the higher MAE
chosenVar.final        = chosenVar[1:length(chosenVar)-1]
mae.train.latest.final = mae.train.latest[1:length(mae.train.latest)-1]
mae.test.latest.final  = mae.test.latest[1:length(mae.test.latest)-1]
mae.xval.latest.final  = mae.xval.latest[1:length(mae.xval.latest)-1]
# Export the data prediction for the testing and validation data sets
outfilePath = file.path("~/Dropbox","NU","THESIS_MAC","thesis","DATASETS","RESULTS", "PREDICTIONS","FORWARD_VAR_PREDICTIONS")
dfExportResults = data.frame(chosenVar.final, mae.train.latest.final, mae.test.latest.final, mae.xval.latest.final, 1)
chosenVar
mae.train.latest
mae.test.latest
mae.xval.latest
chosenVar
createDataFrame = function(df,responseCol,params){
dfParamsInclude   = which(names(df) %in% c(params))
dfNewParams       = df[,dfParamsInclude]
dfNewResponseInc  = which(names(df) %in% c(responseCol))
dfNewResponse     = df[,dfNewResponseInc]
dfNew             = cbind(dfNewResponse, dfNewParams)
colnames(dfNew)[1] = paste0(responseCol)
return(dfNew)
}
chosenVar        = c()
mae.train.latest = c()
mae.test.latest  = c()
mae.xval.latest  = c()
for (i in 1:6){
response        = c('NO2')    # NO, NOX, SO2, PM10, PM2.5
results         = c()
# get data set fields that I can use in the model.
dropIdx               = which(names(df) %in% c('Year', 'MMYYYY', response, chosenVar)) #chosenVar[length(chosenVar)])) #chosenVar))
dfPredictors          = df[,-dropIdx]
predictorVariableList = names(dfPredictors)
#length(predictorVariableList)
# get all values in data frame that are remaining and find all combinations of each --> i changed this to be '1' var added each time so combination no longer needed, but i keep for future ref and change the combination to '1' var.
combn = data.frame(combn(predictorVariableList, 1))
set.seed(123)
smp.size = floor(0.70 * nrow(df))
train = sample(seq_len(nrow(df)), size = smp.size)
test = -train
if(length(mae.xval.latest)>1){
if(mae.xval.latest[length(mae.xval.latest)] > mae.xval.latest[length(mae.xval.latest)-1]) {
break
}
}
for (i in 1:1){
for (j in 1:dim(combn)[2]){
# create the data frame
#paramList = as.list(t(combn[j]))    # for this next loop we need to add chosenVar's + 1 from each combn
#listVars  = chosenVar[length(chosenVar)]
paramList = append(chosenVar, as.list(t(combn[j])))
dfNew = createDataFrame(df, response[i], paramList)
# # rename the df to df.train, df.test, and df.vali respectively
df.train = dfNew[train,]
df.test  = dfNew[-train,]
#
# # create h2o-ready frame
df.train.hex <- as.h2o(df.train)
df.test.hex <- as.h2o(df.test)
#
colcount = dim(df.train.hex)[2]
# nodes_layer1 = ceiling(colcount/2)   # 1
#nodes_layer1 = 10
nodes_layer1 = 20
df.train.dl <- h2o.deeplearning(x = 2:colcount, y = 1, training_frame = df.train.hex, validation_frame= df.test.hex, hidden=c(nodes_layer1),
distribution= "AUTO", variable_importances = TRUE, reproducible = TRUE, seed = 1234, nfolds=10)
mae.train = h2o.mae(df.train.dl, train = TRUE,  valid = FALSE, xval=FALSE)
mae.test  = h2o.mae(df.train.dl, train = FALSE, valid = TRUE,  xval=FALSE)
mae.xval  = h2o.mae(df.train.dl, train = FALSE, valid = FALSE, xval=TRUE)
# next: create the results table which will be a csv file with response, inputVariableName(s), mae train, test, and vali as other columns
responseCol = response[i]
inputVarCol = as.character(t(paramList))
results.temp = data.frame(responseCol, j, inputVarCol, mae.train, mae.test, mae.xval)  #
results = rbind(results, results.temp)
}
}
# note - had to re-do results since the adding of results to the last results table doesnt work for the 'toString' section.
#results = results[129:382,]
x = results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
# at this point we have a table of values that we can use, but need to select the one var that minimizes the mae.xval
y = y %>% select(responseCol.x, predictorVar, mae.train, mae.test, mae.xval) %>% slice(which.min(mae.xval))
# variable 1 selected for predicting NO2 is lag.1.NO2. No surprises there. The mae.xval is 4.544425
# variable 2 selected for predicting NO2 is the lag.1.SOLR.                The mae.xval is 4.360116
# variable 3 selected for predicting NO2 is the lag.2.NO2.                 The mae.xval is 4.259163
addPredictorVar = unlist(strsplit(y$predictorVar, split=", "))
chosenVar       = append(chosenVar, addPredictorVar[length(addPredictorVar)]) #y$predictorVar)
mae.train.latest = append(mae.train.latest,min(y$mae.train))
mae.test.latest = append(mae.test.latest,min(y$mae.test))
mae.xval.latest = append(mae.xval.latest,min(y$mae.xval))
}
createDataFrame = function(df,responseCol,params){
dfParamsInclude   = which(names(df) %in% c(params))
dfNewParams       = df[,dfParamsInclude]
dfNewResponseInc  = which(names(df) %in% c(responseCol))
dfNewResponse     = df[,dfNewResponseInc]
dfNew             = cbind(dfNewResponse, dfNewParams)
colnames(dfNew)[1] = paste0(responseCol)
return(dfNew)
}
chosenVar        = c()
mae.train.latest = c()
mae.test.latest  = c()
mae.xval.latest  = c()
for (i in 1:6){
response        = c('NO2')    # NO, NOX, SO2, PM10, PM2.5
results         = c()
# get data set fields that I can use in the model.
dropIdx               = which(names(df) %in% c('Year', 'MMYYYY', response, chosenVar)) #chosenVar[length(chosenVar)])) #chosenVar))
dfPredictors          = df[,-dropIdx]
predictorVariableList = names(dfPredictors)
#length(predictorVariableList)
# get all values in data frame that are remaining and find all combinations of each --> i changed this to be '1' var added each time so combination no longer needed, but i keep for future ref and change the combination to '1' var.
combn = data.frame(combn(predictorVariableList, 1))
set.seed(123)
smp.size = floor(0.70 * nrow(df))
train = sample(seq_len(nrow(df)), size = smp.size)
test = -train
if(length(mae.xval.latest)>1){
if(mae.xval.latest[length(mae.xval.latest)] > mae.xval.latest[length(mae.xval.latest)-1]) {
break
}
}
for (i in 1:1){
for (j in 1:dim(combn)[2]){
# create the data frame
#paramList = as.list(t(combn[j]))    # for this next loop we need to add chosenVar's + 1 from each combn
#listVars  = chosenVar[length(chosenVar)]
paramList = append(chosenVar, as.list(t(combn[j])))
dfNew = createDataFrame(df, response[i], paramList)
# # rename the df to df.train, df.test, and df.vali respectively
df.train = dfNew[train,]
df.test  = dfNew[-train,]
#
# # create h2o-ready frame
df.train.hex <- as.h2o(df.train)
df.test.hex <- as.h2o(df.test)
#
colcount = dim(df.train.hex)[2]
# nodes_layer1 = ceiling(colcount/2)   # 1
#nodes_layer1 = 10
nodes_layer1 = 5
df.train.dl <- h2o.deeplearning(x = 2:colcount, y = 1, training_frame = df.train.hex, validation_frame= df.test.hex, hidden=c(nodes_layer1),
distribution= "AUTO", variable_importances = TRUE, reproducible = TRUE, seed = 1234, nfolds=10)
mae.train = h2o.mae(df.train.dl, train = TRUE,  valid = FALSE, xval=FALSE)
mae.test  = h2o.mae(df.train.dl, train = FALSE, valid = TRUE,  xval=FALSE)
mae.xval  = h2o.mae(df.train.dl, train = FALSE, valid = FALSE, xval=TRUE)
# next: create the results table which will be a csv file with response, inputVariableName(s), mae train, test, and vali as other columns
responseCol = response[i]
inputVarCol = as.character(t(paramList))
results.temp = data.frame(responseCol, j, inputVarCol, mae.train, mae.test, mae.xval)  #
results = rbind(results, results.temp)
}
}
# note - had to re-do results since the adding of results to the last results table doesnt work for the 'toString' section.
#results = results[129:382,]
x = results %>%
group_by(responseCol, j) %>%
summarise(predictorVar = toString(inputVarCol)) %>%
ungroup()
# next: i need to join back to the 'j' col the output for the mae.train, mae.test, and mae.vali
y = inner_join(x, results, by=("j" = "j"))
y = y %>% group_by(j) %>% filter(row_number(mae.train) == 1)
y = y %>% select(j, responseCol.x, predictorVar, mae.train, mae.test, mae.xval)
y = y[,-1]  # remove the 'j'!!
# at this point we have a table of values that we can use, but need to select the one var that minimizes the mae.xval
y = y %>% select(responseCol.x, predictorVar, mae.train, mae.test, mae.xval) %>% slice(which.min(mae.xval))
# variable 1 selected for predicting NO2 is lag.1.NO2. No surprises there. The mae.xval is 4.544425
# variable 2 selected for predicting NO2 is the lag.1.SOLR.                The mae.xval is 4.360116
# variable 3 selected for predicting NO2 is the lag.2.NO2.                 The mae.xval is 4.259163
addPredictorVar = unlist(strsplit(y$predictorVar, split=", "))
chosenVar       = append(chosenVar, addPredictorVar[length(addPredictorVar)]) #y$predictorVar)
mae.train.latest = append(mae.train.latest,min(y$mae.train))
mae.test.latest = append(mae.test.latest,min(y$mae.test))
mae.xval.latest = append(mae.xval.latest,min(y$mae.xval))
}
